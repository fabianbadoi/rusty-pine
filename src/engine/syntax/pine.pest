// pine = { SOI ~ simple_compound_expression ~ ("|" ~ operation)* ~ terminal_meta_operation? ~ EOI }
root = { SOI ~ base ~ ( "|" ~ pine)* ~ EOI }
base = { ("f:" | "from:")? ~ table ~ condition* }

pine               = _{
                        select_pine
                         | filter_pine
                         | limit_pine
                         | order_pine
                         | group_pine
                         | unselect_pine
                         // Take care to always put this last. The compound_join_pine can
                         // interfere with other matches
                         | join_pine
                     }
select_pine        = { ("s:" | "select:") ~ selectable+ }
join_pine          = _{ explicit_join_pine | explicit_auto_join_pine | compound_join_pine }
filter_pine        = { ("w:" | "where:") ~ condition+ }
limit_pine         = { ("limit:" | "l:") ~ literal_value ~ literal_value? }
order_pine         = { ("order:" | "o:") ~ order+ }
group_pine         = { ("group:" | "g:") ~ selectable+ }
unselect_pine      = { ("unselect:" | "u:") ~ column+ }

explicit_join_pine      = { ("j:" | "join:") ~ table ~ condition+ }
explicit_auto_join_pine = { ("j:" | "join:") ~ table }
compound_join_pine      = { table ~ condition* }

// Selectables are columns, conditions, values or function calls. They're the things you can put in SELECT or WHERE
// clauses (and more).
selectable    = { condition | computation }
computation   = { function_call | column | literal_value }
function_call = { sql_name ~ "(" ~ computation* ~ ")"}

// The condition rule has a "!". This makes it always accept whitespace, even if in the "order"
// rule where we disable whitespace for the "+" and "-".
condition             = !{ unary_condition | binary_condition }
binary_condition      = { computation ~ comparison_symbol ~ computation }
unary_condition       = { is_null_condition | is_not_null_condition }
is_null_condition     = { computation ~ "?" }
is_not_null_condition = { computation ~ "!?" }

order = ${selectable ~ (order_descending | order_ascending)?}
order_descending = { "-" }
order_ascending  = { "+" }

column = { db_table_column_name | table_column_name | column_name }
column_name = { sql_name }
table_column_name = { sql_name ~ "." ~ sql_name }
db_table_column_name = { table ~ "." ~ sql_name }

table = { db_table_name | sql_name }
db_table_name = { sql_name ~ "." ~ sql_name }
sql_name = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

// values
literal_value =  { numeric_value | string_value }
numeric_value = @{ (ASCII_DIGIT | "_")+ ~ ("." ~ (ASCII_DIGIT | "_")+)? }
string_value  =  { quote_string_value | apostrophe_string_value }

// strings are expressed this way to more easily support escape characters
quote_string_value = ${ "\"" ~ quote_string_inner ~ "\"" }
quote_string_inner = @{ quote_string_char* }
quote_string_char  = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

apostrophe_string_value = ${ "'" ~ apostrophe_string_inner ~ "'" }
apostrophe_string_inner = @{ apostrophe_string_char* }
apostrophe_string_char  = {
    !("'" | "\\") ~ ANY
    | "\\" ~ ("'" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

comparison_symbol = { "=" | "!="  | ">" | ">=" | "<" | "<=" }

WHITESPACE = _{ " " | "\t" }
