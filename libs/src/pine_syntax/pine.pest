pine = { SOI ~ operation ~ ("|" ~ operation)* ~ EOI }
operation = _{ (from | select | unselect | filters | join | order | limit | compound_expression) }

compound_expression = { table_name ~ (numeric_value | filter)* }


// actual pines
from = { ("from:" | "f:") ~ table_name }
join = { ("join:" | "j:") ~ table_name }
select = { ("select:" | "s:") ~ (function_call | identified_column)+ }
unselect = { ("unselect:" | "u:") ~ identified_column+ }
filters = { ("where:" | "w:") ~ filter+ }
order = { ("order:" | "o:") ~ ordering ~ ("," ~ ordering)* }
limit = { ("limit:" | "l:") ~ numeric_value }

function_call = { function_name ~ "(" ~ identified_column ~ ")" }
function_name = @{ sql_name }

// identifiers
table_name = { sql_name }
column_name = { sql_name }
identified_column = { fully_qualified_column | column_name }
fully_qualified_column = { table_name ~ "." ~ column_name }
sql_name = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }


// conditions
filter = { binary_filter | unary_filter }
unary_filter = { filter_is_null | filter_is_not_null }
binary_filter = { operand ~ operator ~ operand }

filter_is_null = { operand ~ "?" }
filter_is_not_null = { operand ~ "!?" }

operand = { identified_column | value }

operator = _{ optr_eq | optr_ne | optr_gte | optr_gt | optr_lte | optr_lt }
optr_eq  = { "="  }
optr_ne  = { "!=" }
optr_gt  = { ">"  }
optr_gte = { ">=" }
optr_lt  = { "<"  }
optr_lte = { "<=" }


// orders
ordering = { ordering_asc | ordering_desc }
ordering_desc = { operand ~ direction_desc? }
ordering_asc  = { operand ~ direction_asc }
direction_asc = _{ "asc" | "ASC" | "+" }
direction_desc = _ { "desc" | "DESC" | "-" }


// values
value = _{ numeric_value | string_value }

numeric_value = { (ASCII_DIGIT | "_")+ }

string_value = { quote_string_value | apostrophe_string_value }

quote_string_value = ${ "\"" ~ quote_string_inner ~ "\"" }
quote_string_inner = @{ quote_string_char* }
quote_string_char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

apostrophe_string_value = ${ "'" ~ apostrophe_string_inner ~ "'" }
apostrophe_string_inner = @{ apostrophe_string_char* }
apostrophe_string_char = {
    !("'" | "\\") ~ ANY
    | "\\" ~ ("'" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}


// special rule, makes all ~ accept whitespace
WHITESPACE = _{ " " }
